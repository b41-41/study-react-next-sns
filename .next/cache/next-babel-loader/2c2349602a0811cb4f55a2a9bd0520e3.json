{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; //action creator\n//액션 크리에이터를 하면 아래에 있는 것처럼 아주 쉽게 반복해서 사용할 수 있기 때문에 좋음.\n//async action crator(비동기 액션 크리에이터도 만들 수 있는데 그건 redux saga를 이용)\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n\nchangeNickname('dabin'); //이건 위와 같음\n//{\n// type: 'CHANGE_NICKNAME',\n// data: 'dabin',\n//}\n\nstore.dispatch(changeNickname('닉네임')); // (이전상태, 액션) => 다음상태 이게 리덕스\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/jeong/Desktop/study-react-next-sns/reducers/index.js"],"names":["initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","store","dispatch","rootReducer","state","action"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;AACA;AACA;;AACA,MAAME,cAAc,GAAIH,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD;;AAMAG,cAAc,CAAC,OAAD,CAAd,C,CACA;AACA;AACA;AACA;AACA;;AAEAC,KAAK,CAACC,QAAN,CAAeF,cAAc,CAAC,KAAD,CAA7B,E,CAEA;;AACA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACP,IAAf;AACI,SAAK,QAAL;AACI,6CACOM,KADP;AAEId,QAAAA,IAAI,kCACGc,KAAK,CAACd,IADT;AAEAC,UAAAA,UAAU,EAAE,IAFZ;AAGAD,UAAAA,IAAI,EAAEe,MAAM,CAACR;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOO,KADP;AAEId,QAAAA,IAAI,kCACGc,KAAK,CAACd,IADT;AAEAC,UAAAA,UAAU,EAAE,KAFZ;AAGAD,UAAAA,IAAI,EAAE;AAHN;AAFR;AAXR;AAoBH,CArBD;;AAuBA,eAAea,WAAf","sourcesContent":["const initialState = {\n    user: {\n        isLoggedIn: false,\n        user: null,\n        signUpData: {},\n        loginData: {},\n    },\n    post: {\n        mainPosts: [],\n    },\n};\n\nexport const loginAction = (data) => {\n    return {\n        type: 'LOG_IN',\n        data,\n    }\n};\n\nexport const logoutAction = () => {\n    return {\n        type: 'LOG_OUT',\n    }\n};\n\n//action creator\n//액션 크리에이터를 하면 아래에 있는 것처럼 아주 쉽게 반복해서 사용할 수 있기 때문에 좋음.\n//async action crator(비동기 액션 크리에이터도 만들 수 있는데 그건 redux saga를 이용)\nconst changeNickname = (data) => {\n    return {\n        type: 'CHANGE_NICKNAME',\n        data,\n    }\n}\nchangeNickname('dabin');\n//이건 위와 같음\n//{\n// type: 'CHANGE_NICKNAME',\n// data: 'dabin',\n//}\n\nstore.dispatch(changeNickname('닉네임'))\n\n// (이전상태, 액션) => 다음상태 이게 리덕스\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'LOG_IN':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: true,\n                    user: action.data,\n                },\n            }\n        case 'LOG_OUT':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: false,\n                    user: null,\n                },\n            }\n    }\n};\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}